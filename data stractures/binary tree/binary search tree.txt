this is a hierachical data stratcture where we have nodes connected by edges
a tree is a non linear data stracture due to its nature data fetching cant be linear 
a visualization

                    10  <--- root node
                   /  \
                  /    \
                 5      15 <--- root node (subroot)
                / \     / \
               3   7   10 20  <--- leaf node

======usages=======:
file directory structure
family tree
an organization tree
the dom

======common terminologies=======:
ROOT NODE: this is the intial node within a tree and it must bhave children for it to be a root 10,5,15
LEAF NODES: this are nodes that do not have nodes connected to anything in the above tree 3,7,10,20
SIBLING NODES: these are the nodes that share the same parent eg: 5,15 are sibling nodes while 3,7,10,20 are also siblings
ANCESTOR  NODES: this is like a grand child/parent relationship eg: 10 is an ancestor to 3,7,10,20
PATH: this is the route use to move from one node to another path from 10 to 3 is 10-->5-->3
DISTANCE: this is the distance moved interms of depth from one node to another distance between 10 to 3 is 2

NODE DEGREE: this is the total number of child nodes od a node eg: the degree of 5 is 2
TREE DEREE: this is max degree of a node in a tree the tree degree of above tree is 2 since its a binary tree

TREE DEPTH: this is the deepest node in a tree the above tree depth is 2
NODE DEPTH: this is the amount of edges of a node from the root depth of 5 is 1 while depth of 20 is 2. the root node depth is always 0\


NODE DEGREES: this is defined as


======binary search tree properties=======
as the name suggests each node in the tree has a max of 2 edges 
a principle of a BST is the left node is always smaller than the root node while the right node is greater than the root node of each 
subsequent depth example the above tree 

main functionality within a tree include:
1 insertion         - adding a value to the tree
2.search            - find a given value within the BST
3.tree traversal    - traversing the tree and returning all values 
                        there are 2 kins of tree traversal DFS(depth first search) or BSF(breathe first search)
                        DFS- is further broken down into three techniques 1.preorder 2.inorder 3,postorder

4.deletion          - removal of a node given its value


MAIN USAGE OF BST: searching, sorting, implimentation of abstract data structures such as lookup tables and priority queues

=====BST CLASS implimentation=====
we will have two classes one for the node and another for for the BST

NODE CLASS

        class Node{
            constructor(value){
                this.value=value
                this.left=null
                this.right=null

            }
        }


BINARY SEARCH TREE CLASS

        class BST{
            constructor(){
        this.root=null
                         }

        get isEmpty(){
        return this.root===null
                     }

        insert(value){
        const node=new Node(value)

        if(this.isEmpty==true){

            this.root=node
            console.log(this.root);

        }else{

        
            return this.insertnode(this.root,node)
        }
    }


    insertnode(root,newnode){
        if(root.value>newnode.value){
            if(root.left == null) {
                root.left=newnode
            }else{
                 this.insertnode(root.left,newnode)
            }
        }else{
        if(root.right == null) {
                root.right=newnode
            }else{
                 this.insertnode(root.right,newnode)
            }
        }
    }



    search(value){

       
        if(this.root&&this.root.value==value) return console.log(value,' is the root node of the tree');
        this.deepsearch(this.root,value)

    }

    deepsearch(node,value){
        if(node==null) return console.log(value,' is not in tree:',false);
        if(node.value== value) return console.log(value,' is in tree:',true);
        if(node.value>value) return this.deepsearch(node.left,value)
        if(node.value<value) return this.deepsearch(node.right,value)
    }

    preordertraversal(root){
        if(root){
            console.log(root.value);
            this.preordertraversal(root.left)
            this.preordertraversal(root.right)
        }

    }

    inordertraversal(root){
        if(root){
            this.inordertraversal(root.left)
            console.log(root.value);
            this.inordertraversal(root.right)
        }

    }

    postordertraversal(root){
        if(root){

          
            this.postordertraversal(root.left)
            this.postordertraversal(root.right)
            console.log(root.value);
        }

    }



    }



======= TREE TRAVERSAL=======

we have 2 main ways for tree traversal
1.DFS-depth first search
2.BFS-breath first search

===DFS===
depth first search has three subsets by which to traverse the bst.
dfs includes going down the tree to the deepest leaf and backtracking 

the three ways of traversing a BST in DFS are

    1.preorder:

    -first check if node has a value if so proceed to steps below 
    -in preorder we get the value of the node first and view it =>in our case we use console.log()
    -then we move to the letft subtree 
    -then the right subtree 
    -we do this reccursively till we get to no nodes 

                        10
                      /    \
                     /      \
                    5        15
                   / \      /  \     
                  /   \   12    16
                 3     7

    the print out value of preorder traversal ==> 10,5,3,7,15,12,16

    2.inorder:

    -first check if node has a value if so proceed to steps below 
    -in inorder we move to the left subtree first till we get to the last left leaf
    -we get the value of the node  and view it =>in our case we use console.log()
    -then move to right subtree 
    -we do this reccursively till we get to no nodes 
    NB: the root node will be near the middle if not the middle point, the retrival order is clockwise


                        10
                      /    \
                     /      \
                    5        15
                   / \      /  \     
                  /   \   12    16
                 3     7

    the print out value of ineorder traversal ==> 3,5,7,10,12,15,16

    3.postorder:


    -first check if node has a value if so proceed to steps below 
    -in postorder we move to the left subtree first
    -then move to right subtree 
    - we get the value of the node  and view it =>in our case we use console.log()
    - we do this reccursively till we get to no nodes 
    NB: inorder always ends with the root value as the last value in the list,the reading of the values is in an anticlockwise manner

                        10
                      /    \
                     /      \
                    5        15
                   / \      /  \     
                  /   \   12    16
                 3     7
                / \
               2   4
    the print out value of postorder traversal ==> 2,4,3,7,5,12,16,15,10

    BREATH FIRST SEARCH:

    compared to dfs this is simpler in its understanding
    -we first get create a stack (from an array for simplicity)
    -we push the root node into the stack
    -we shift the value from the stack
    -then read the value (you can store it in a separate array to view all values in a tree or use a log statement)
    -check the shifted value if it has a left subtree/node if so push into the stack then check if the shifted node
     has a right subtree/node push it to the stack-repeat this till the stack is empty best case scenario id to use 
     a while loop


                        10
                      /    \
                     /      \
                    5        15
                   / \      /  \     
                  /   \   12    16
                 3     7


we push the root node into the stack
                  
|5<-10->15| shift()--> | |

read node val=10 add to valuesarray=>|10| push left/right nodes if available ==> |3<-5->7,12<-15->16| 
|3<-5->7,12<-15->16| shift ()--> |12<-15->16| 

read node val=5 add to valuesarray=>|10,5| push left/right nodes if available ==> |3<-5->7,12<-15->16,3,7|
|12<-15->16,3,7| shift()-->|,3,7|
read node val=15 add to valuesarray=>|10,5,15| push left/right nodes if available ==> |3,7,12,16|

since we have a flat array no more nodes will be added we just read the values till the stack is empty 
afterward we printout the values array

|3,7,12,16|=>|10,5,15|
|7,12,16|  =>|10,5,15,3|
|12,16|    =>|10,5,15,7|
|16|       =>|10,5,15,12|
||         =>|10,5,15,12,16|

final output will be |10,5,15,12,16|


=====MIN MAX NODES====
to the the smallest/minmum value is a bst we traverse and get the last left 
leaf in a bst hence we will focus only on the left sub tree






















